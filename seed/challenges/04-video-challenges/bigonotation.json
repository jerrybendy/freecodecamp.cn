{
  "name": "Big O Notation",
  "order": 4,
  "time": "30 minutes",
  "challenges": [
    {
      "id": "56b15f15632298c12f31517b",
      "title": "Big O Notation: What It Is and Why You Should Care",
      "description": [
        "时间复杂度是讨论算法花费多少时间的一种方式。它对于更快的提高精简中的软件的运行速度有着很大的作用。",
        "当你编写代码的时候，你应该要知道这个软件需要花多长时间去执行。没有人想要创造一个由于运行缓慢而让用户觉得沮丧的项目。",
        "时间复杂度相对于一个算法来说，是一个或多个函数的集合。",
        "大O符号专门帮助您识别是算法没有'规模'好，还是在有大量不同的用户，信息，或其他投入量工作下运行良好。",
        "这不符合摩尔定律 - 不管你的电脑有多大有快捷，如果算法是成倍地低效率，它在现实就无法使用。",
        "此外，关于大O符号和时间复杂度的问题可作为面试问题。",
        "您的雇主将会希望您写的代码在加载用户的页面上不会花费太长的时间，大O符号的知识说明您在编写代码是认识到这一点的。",
        "从这段视频中可以得出的结论是当您的网站或应用程序扩大时，大O符号可帮助您明确在速度和内存上有可能出现的问题（有时是大问题）。"
      ],
      "challengeSeed": [
        "139874123"
      ],
      "tests": [
        [
          "如果一个算法对少量数据来说是高效的，那么它将对大量数据的同样高效。",
          false,
          "这取决于算法和它处理的数据。"
        ],
        [
          "大O符号反映了算法在预期投入方面的速度。",
          true
        ]
      ],
      "type": "hike",
      "challengeType": 6
    },
    {
      "id": "56b15f15632298c12f31517a",
      "title": "Big O Notation: A Few Examples",
      "description": [
        "通过在算法中执行的基本操作（基本操作=一个花费固定时间执行的操作）的数目统计来测量时间复杂度。",
        "时间复杂度由函数T(n)表示。O代表函数，(n)表示作用于元件的数目。",
        "渐进时间复杂度，对于任何的有效输入它可能花费的最长时间，是表达时间复杂度最常见的方式。",
        "当你讨论大0符号,通常指的是最坏的情况。",
        "例如，如果我们有两个列表搜索常见条目,我们将计算条目在每个列表花费的最长时间，我们不低估可能需要多长时间是为了安全起见。",
        "O(1)——确定一个数字是奇数或偶数。O(1)是一个静态的时间常量,不管有多少信息或有多少用户它都是一样的不改变。",
        "O(log N)——发现一个字在字典里(使用二分法检索)。二分法检索是一个典型的“分而治之”的算法。",
        "O(N)——看一本书",
        "O(N log N)——排序一副扑克牌(使用归并排序)",
        "O(N ^ 2)——在你购物车上检查你的购物清单的每一样东西",
        "O(∞)-掷硬币,直到它落在头上",
        "作为一个经验法则,任何用N ^ 2或其他指数对于多个用户的网站来说都不是好的算法。",
        "如果你的算法降低在输入上降低指数,你应该找一个更有效的方法来解决这个问题。",
        "当你编码循环内循环,你要特别注意时间复杂度。",
        "大O备忘单是当你分类算法时的一个查看平台,像“合并排序”或“快速排序”。",
        "<a href='http://bigocheatsheet.com/' target='_blank'>bigocheatsheet.com/</a>",
        "普林斯顿Coursera课程不是一颗卑微的心。通过在java的例子和实践中，这门课程将涵盖java的迭代数据，排序，和搜索算法。",
        "<a href='http://coursera.org/course/algs4partI' target='_blank'>coursera.org/course/algs4partI</a>"
      ],
      "challengeSeed": [
        "139877627"
      ],
      "tests": [
        [
          "算法表达了指数O(N ^ 2)可以在某些情况下工作得很好,所以你不应该完全避免它们。",
          false,
          "虽然它们可以在某些小范围的情况下工作,但由于他们不会在大范围内工作所以他们并不是好的做法。"
        ],
        [
          "如果你的做法是有效的所有的算法都可以分解完成在一个静态的时间。",
          false,
          "在某些程度上并不是所有的算法都可以简化,但你应该总是试图找到最简单的方法来解决你的问题。"
        ]
      ],
      "type": "hike",
      "challengeType": 6
    }
  ]
}
